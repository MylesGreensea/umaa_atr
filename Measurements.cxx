// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Measurements.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Measurements.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>















































UMAA::Common::Measurement::DateTime::DateTime()
{
    // m_seconds com.eprosima.idl.parser.typecode.AliasTypeCode@55b7a4e0
    m_seconds = 0;
    // m_nanoseconds com.eprosima.idl.parser.typecode.AliasTypeCode@5f058f00
    m_nanoseconds = 0;

}

UMAA::Common::Measurement::DateTime::~DateTime()
{


}

UMAA::Common::Measurement::DateTime::DateTime(
        const DateTime& x)
{
    m_seconds = x.m_seconds;
    m_nanoseconds = x.m_nanoseconds;
}

UMAA::Common::Measurement::DateTime::DateTime(
        DateTime&& x)
{
    m_seconds = x.m_seconds;
    m_nanoseconds = x.m_nanoseconds;
}

UMAA::Common::Measurement::DateTime& UMAA::Common::Measurement::DateTime::operator =(
        const DateTime& x)
{

    m_seconds = x.m_seconds;
    m_nanoseconds = x.m_nanoseconds;

    return *this;
}

UMAA::Common::Measurement::DateTime& UMAA::Common::Measurement::DateTime::operator =(
        DateTime&& x)
{

    m_seconds = x.m_seconds;
    m_nanoseconds = x.m_nanoseconds;

    return *this;
}

bool UMAA::Common::Measurement::DateTime::operator ==(
        const DateTime& x) const
{

    return (m_seconds == x.m_seconds && m_nanoseconds == x.m_nanoseconds);
}

bool UMAA::Common::Measurement::DateTime::operator !=(
        const DateTime& x) const
{
    return !(*this == x);
}

size_t UMAA::Common::Measurement::DateTime::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t UMAA::Common::Measurement::DateTime::getCdrSerializedSize(
        const UMAA::Common::Measurement::DateTime& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void UMAA::Common::Measurement::DateTime::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seconds;
    scdr << m_nanoseconds;

}

void UMAA::Common::Measurement::DateTime::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seconds;
    dcdr >> m_nanoseconds;
}

/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void UMAA::Common::Measurement::DateTime::seconds(
        UMAA::Common::Measurement::DateTimeSeconds _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
UMAA::Common::Measurement::DateTimeSeconds UMAA::Common::Measurement::DateTime::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
UMAA::Common::Measurement::DateTimeSeconds& UMAA::Common::Measurement::DateTime::seconds()
{
    return m_seconds;
}

/*!
 * @brief This function sets a value in member nanoseconds
 * @param _nanoseconds New value for member nanoseconds
 */
void UMAA::Common::Measurement::DateTime::nanoseconds(
        UMAA::Common::Measurement::DateTimeNanoseconds _nanoseconds)
{
    m_nanoseconds = _nanoseconds;
}

/*!
 * @brief This function returns the value of member nanoseconds
 * @return Value of member nanoseconds
 */
UMAA::Common::Measurement::DateTimeNanoseconds UMAA::Common::Measurement::DateTime::nanoseconds() const
{
    return m_nanoseconds;
}

/*!
 * @brief This function returns a reference to member nanoseconds
 * @return Reference to member nanoseconds
 */
UMAA::Common::Measurement::DateTimeNanoseconds& UMAA::Common::Measurement::DateTime::nanoseconds()
{
    return m_nanoseconds;
}


size_t UMAA::Common::Measurement::DateTime::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool UMAA::Common::Measurement::DateTime::isKeyDefined()
{
    return false;
}

void UMAA::Common::Measurement::DateTime::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}










































