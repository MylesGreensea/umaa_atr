// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MeasurementsPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_UMAA_COMMON_MEASUREMENT_MEASUREMENTS_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_UMAA_COMMON_MEASUREMENT_MEASUREMENTS_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastrtps/utils/md5.h>

#include "Measurements.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated Measurements is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace UMAA
{
    namespace Common
    {
        namespace Measurement
        {
            typedef double AngleAcceleration;
            typedef double AnglePosition;
            typedef double Charge;
            typedef double Conductivity;
            typedef double DataTransferRate;
            typedef double Distance_ASF;
            typedef double Distance_BSL;
            typedef double Effort;
            typedef double Energy_Percent;
            typedef double FrameRateFPS;
            typedef double FrequencyRPM;
            typedef double Heading_CurrentDirection;
            typedef double Heading_MagneticNorth;
            typedef double Heading_WindDirection;
            typedef double Mass_MetricTon;
            typedef double MassFlowRate;
            typedef BasicTypes::Quaternion OrientationQuaternion;
            typedef double PositiveCount;
            typedef double Power_Percent;
            typedef double Pressure_Percent;
            typedef double Salinity;
            typedef int32_t SidesCount;
            typedef double Speed_BSL;
            typedef double Speed_LocalWaterMass;
            typedef double Volume_CubicMeter;
            typedef double Volume_Percent;
            typedef double VolumetricFlowRate;
        }
    }
}
namespace UMAA
{
    namespace Common
    {
        namespace Measurement
        {
            typedef double AccelerationScalar;
            typedef double Angle;
            typedef double AngleRate;
            typedef double Azimuth_TrueNorth_PosAngle;
            typedef double BarometricPressure;
            typedef int32_t CommsRate_BitsPerSecond;
            typedef double CommsRate_MegabitsPerSecond;
            typedef double ContinuousSize;
            typedef int32_t Count;
            typedef double Course_TrueNorth;
            typedef double CovarOrientation;
            typedef double CovarPosPos;
            typedef double CovarPosVel;
            typedef double CovarVelVel;
            typedef int64_t DateTimeSeconds;
            typedef int32_t DateTimeNanoseconds;
            /*!
             * @brief This class represents the TopicDataType of the type DateTime defined by the user in the IDL file.
             * @ingroup MEASUREMENTS
             */
            class DateTimePubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef DateTime type;

                eProsima_user_DllExport DateTimePubSubType();

                eProsima_user_DllExport virtual ~DateTimePubSubType();

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    new (memory) DateTime();
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;
            };
            typedef double Density;
            typedef double Distance;
            typedef double Distance_Precise;
            typedef double Duration_Hours;
            typedef double Duration_Seconds;
            typedef double ElectricalPower;
            typedef double EngineSpeed;
            typedef double FieldOfView_LineOfSightFocalPlane;
            typedef double FocusValue;
            typedef double Force;
            typedef double Frequency_Hertz;
            typedef double GroundSpeed;
            typedef double Heading_TrueNorth_Angle;
            typedef double IndicatedAirspeed;
            typedef int32_t IPPort_Counting;
            typedef double MagneticVariation;
            typedef double Mass;
            typedef std::array<uint8_t, 16> NumericGUID;
            typedef int32_t Order;
            typedef double Percent;
            typedef double Pitch_HalfAngle;
            typedef double PitchAcceleration;
            typedef double PitchRate;
            typedef double PowerBusCurrent;
            typedef double PowerBusVoltage;
            typedef double Pressure_KiloPascals;
            typedef double RadioFrequency_Hertz;
            typedef double RelativeAngle;
            typedef double RelativeHumidity;
            typedef double Roll_Angle;
            typedef double RollAcceleration;
            typedef double RollRate;
            typedef double Size_Numeral;
            typedef double Speed;
            typedef double Temperature;
            typedef double TurnRate;
            typedef double Yaw_PosAngle;
            typedef double YawAcceleration;
            typedef double YawRate;
        }
    }
}

#endif // _FAST_DDS_GENERATED_UMAA_COMMON_MEASUREMENT_MEASUREMENTS_PUBSUBTYPES_H_