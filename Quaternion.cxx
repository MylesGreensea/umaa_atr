// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Quaternion.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Quaternion.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

BasicTypes::Quaternion::Quaternion()
{
    // m_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77fbd92c
    m_a = 0.0;
    // m_b com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67c27493
    m_b = 0.0;
    // m_c com.eprosima.idl.parser.typecode.PrimitiveTypeCode@72967906
    m_c = 0.0;
    // m_d com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5b8dfcc1
    m_d = 0.0;

}

BasicTypes::Quaternion::~Quaternion()
{




}

BasicTypes::Quaternion::Quaternion(
        const Quaternion& x)
{
    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
}

BasicTypes::Quaternion::Quaternion(
        Quaternion&& x)
{
    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
}

BasicTypes::Quaternion& BasicTypes::Quaternion::operator =(
        const Quaternion& x)
{

    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;

    return *this;
}

BasicTypes::Quaternion& BasicTypes::Quaternion::operator =(
        Quaternion&& x)
{

    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;

    return *this;
}

bool BasicTypes::Quaternion::operator ==(
        const Quaternion& x) const
{

    return (m_a == x.m_a && m_b == x.m_b && m_c == x.m_c && m_d == x.m_d);
}

bool BasicTypes::Quaternion::operator !=(
        const Quaternion& x) const
{
    return !(*this == x);
}

size_t BasicTypes::Quaternion::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t BasicTypes::Quaternion::getCdrSerializedSize(
        const BasicTypes::Quaternion& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void BasicTypes::Quaternion::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a;
    scdr << m_b;
    scdr << m_c;
    scdr << m_d;

}

void BasicTypes::Quaternion::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a;
    dcdr >> m_b;
    dcdr >> m_c;
    dcdr >> m_d;
}

/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void BasicTypes::Quaternion::a(
        double _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
double BasicTypes::Quaternion::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
double& BasicTypes::Quaternion::a()
{
    return m_a;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void BasicTypes::Quaternion::b(
        double _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
double BasicTypes::Quaternion::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
double& BasicTypes::Quaternion::b()
{
    return m_b;
}

/*!
 * @brief This function sets a value in member c
 * @param _c New value for member c
 */
void BasicTypes::Quaternion::c(
        double _c)
{
    m_c = _c;
}

/*!
 * @brief This function returns the value of member c
 * @return Value of member c
 */
double BasicTypes::Quaternion::c() const
{
    return m_c;
}

/*!
 * @brief This function returns a reference to member c
 * @return Reference to member c
 */
double& BasicTypes::Quaternion::c()
{
    return m_c;
}

/*!
 * @brief This function sets a value in member d
 * @param _d New value for member d
 */
void BasicTypes::Quaternion::d(
        double _d)
{
    m_d = _d;
}

/*!
 * @brief This function returns the value of member d
 * @return Value of member d
 */
double BasicTypes::Quaternion::d() const
{
    return m_d;
}

/*!
 * @brief This function returns a reference to member d
 * @return Reference to member d
 */
double& BasicTypes::Quaternion::d()
{
    return m_d;
}


size_t BasicTypes::Quaternion::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool BasicTypes::Quaternion::isKeyDefined()
{
    return false;
}

void BasicTypes::Quaternion::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

