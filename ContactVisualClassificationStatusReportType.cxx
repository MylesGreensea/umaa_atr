// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ContactVisualClassificationStatusReportType.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ContactVisualClassificationStatusReportType.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::ContactVisualClassificationStatusReportType()
{
    // m_confidence com.eprosima.idl.parser.typecode.AliasTypeCode@50b472aa
    m_confidence = 0.0;
    // m_source com.eprosima.idl.parser.typecode.AliasTypeCode@31368b99
    memset(&m_source, 0, (16) * 1);
    // m_timeStamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1725dc0f

    // m_contactID com.eprosima.idl.parser.typecode.AliasTypeCode@31368b99
    memset(&m_contactID, 0, (16) * 1);
    // m_visualClassification com.eprosima.idl.parser.typecode.EnumTypeCode@3911c2a7
    m_visualClassification = UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::AID_TO_NAVIGATION_CHANNEL_MARKER;

}

UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::~ContactVisualClassificationStatusReportType()
{





}

UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::ContactVisualClassificationStatusReportType(
        const ContactVisualClassificationStatusReportType& x)
{
    m_confidence = x.m_confidence;
    m_source = x.m_source;
    m_timeStamp = x.m_timeStamp;
    m_contactID = x.m_contactID;
    m_visualClassification = x.m_visualClassification;
}

UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::ContactVisualClassificationStatusReportType(
        ContactVisualClassificationStatusReportType&& x)
{
    m_confidence = x.m_confidence;
    m_source = std::move(x.m_source);
    m_timeStamp = std::move(x.m_timeStamp);
    m_contactID = std::move(x.m_contactID);
    m_visualClassification = x.m_visualClassification;
}

UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::operator =(
        const ContactVisualClassificationStatusReportType& x)
{

    m_confidence = x.m_confidence;
    m_source = x.m_source;
    m_timeStamp = x.m_timeStamp;
    m_contactID = x.m_contactID;
    m_visualClassification = x.m_visualClassification;

    return *this;
}

UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::operator =(
        ContactVisualClassificationStatusReportType&& x)
{

    m_confidence = x.m_confidence;
    m_source = std::move(x.m_source);
    m_timeStamp = std::move(x.m_timeStamp);
    m_contactID = std::move(x.m_contactID);
    m_visualClassification = x.m_visualClassification;

    return *this;
}

bool UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::operator ==(
        const ContactVisualClassificationStatusReportType& x) const
{

    return (m_confidence == x.m_confidence && m_source == x.m_source && m_timeStamp == x.m_timeStamp && m_contactID == x.m_contactID && m_visualClassification == x.m_visualClassification);
}

bool UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::operator !=(
        const ContactVisualClassificationStatusReportType& x) const
{
    return !(*this == x);
}

size_t UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += UMAA::Common::Measurement::DateTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::getCdrSerializedSize(
        const UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((16) > 0)
    {
        current_alignment += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += UMAA::Common::Measurement::DateTime::getCdrSerializedSize(data.timeStamp(), current_alignment);
    if ((16) > 0)
    {
        current_alignment += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_confidence;
    scdr << m_source;

    scdr << m_timeStamp;
    scdr << m_contactID;

    scdr << (uint32_t)m_visualClassification;

}

void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_confidence;
    dcdr >> m_source;

    dcdr >> m_timeStamp;
    dcdr >> m_contactID;

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_visualClassification = (UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType)enum_value;
    }

}

/*!
 * @brief This function sets a value in member confidence
 * @param _confidence New value for member confidence
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::confidence(
        UMAA::Common::Measurement::Percent _confidence)
{
    m_confidence = _confidence;
}

/*!
 * @brief This function returns the value of member confidence
 * @return Value of member confidence
 */
UMAA::Common::Measurement::Percent UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::confidence() const
{
    return m_confidence;
}

/*!
 * @brief This function returns a reference to member confidence
 * @return Reference to member confidence
 */
UMAA::Common::Measurement::Percent& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::confidence()
{
    return m_confidence;
}

/*!
 * @brief This function copies the value in member source
 * @param _source New value to be copied in member source
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::source(
        const UMAA::Common::Measurement::NumericGUID& _source)
{
    m_source = _source;
}

/*!
 * @brief This function moves the value in member source
 * @param _source New value to be moved in member source
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::source(
        UMAA::Common::Measurement::NumericGUID&& _source)
{
    m_source = std::move(_source);
}

/*!
 * @brief This function returns a constant reference to member source
 * @return Constant reference to member source
 */
const UMAA::Common::Measurement::NumericGUID& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::source() const
{
    return m_source;
}

/*!
 * @brief This function returns a reference to member source
 * @return Reference to member source
 */
UMAA::Common::Measurement::NumericGUID& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::source()
{
    return m_source;
}
/*!
 * @brief This function copies the value in member timeStamp
 * @param _timeStamp New value to be copied in member timeStamp
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::timeStamp(
        const UMAA::Common::Measurement::DateTime& _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function moves the value in member timeStamp
 * @param _timeStamp New value to be moved in member timeStamp
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::timeStamp(
        UMAA::Common::Measurement::DateTime&& _timeStamp)
{
    m_timeStamp = std::move(_timeStamp);
}

/*!
 * @brief This function returns a constant reference to member timeStamp
 * @return Constant reference to member timeStamp
 */
const UMAA::Common::Measurement::DateTime& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
UMAA::Common::Measurement::DateTime& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::timeStamp()
{
    return m_timeStamp;
}
/*!
 * @brief This function copies the value in member contactID
 * @param _contactID New value to be copied in member contactID
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::contactID(
        const UMAA::Common::Measurement::NumericGUID& _contactID)
{
    m_contactID = _contactID;
}

/*!
 * @brief This function moves the value in member contactID
 * @param _contactID New value to be moved in member contactID
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::contactID(
        UMAA::Common::Measurement::NumericGUID&& _contactID)
{
    m_contactID = std::move(_contactID);
}

/*!
 * @brief This function returns a constant reference to member contactID
 * @return Constant reference to member contactID
 */
const UMAA::Common::Measurement::NumericGUID& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::contactID() const
{
    return m_contactID;
}

/*!
 * @brief This function returns a reference to member contactID
 * @return Reference to member contactID
 */
UMAA::Common::Measurement::NumericGUID& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::contactID()
{
    return m_contactID;
}
/*!
 * @brief This function sets a value in member visualClassification
 * @param _visualClassification New value for member visualClassification
 */
void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::visualClassification(
        UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType _visualClassification)
{
    m_visualClassification = _visualClassification;
}

/*!
 * @brief This function returns the value of member visualClassification
 * @return Value of member visualClassification
 */
UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::visualClassification() const
{
    return m_visualClassification;
}

/*!
 * @brief This function returns a reference to member visualClassification
 * @return Reference to member visualClassification
 */
UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType& UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::visualClassification()
{
    return m_visualClassification;
}


size_t UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



     current_align += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_align, 1);

     

     current_align += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_align, 1);

     
     current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

     

    return current_align;
}

bool UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::isKeyDefined()
{
    return true;
}

void UMAA::SA::ContactVisualClassificationStatus::ContactVisualClassificationStatusReportType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      scdr << m_source;

        scdr << m_contactID;

       scdr << (uint32_t)m_visualClassification;
      
}



