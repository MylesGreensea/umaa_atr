// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EnumerationSets.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ENUMERATIONSETS_H_
#define _FAST_DDS_GENERATED_ENUMERATIONSETS_H_

#include "/home/mramey/umaa_atr/BasicTypes/Quaternion.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(EnumerationSets_SOURCE)
#define EnumerationSets_DllAPI __declspec( dllexport )
#else
#define EnumerationSets_DllAPI __declspec( dllimport )
#endif // EnumerationSets_SOURCE
#else
#define EnumerationSets_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define EnumerationSets_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace UMAA {
    namespace Common {
        namespace MaritimeEnumeration {
            namespace AnalogSensorErrorCodeEnumType {
                /*!
                 * @brief This class represents the enumeration AnalogSensorErrorCodeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AnalogSensorErrorCodeEnumType : uint32_t
                {
                    INVALID_FORMAT,
                    UNKNOWN_ERROR_FAULT,
                    UNKNOWN_SENSOR_ID
                };
            } // namespace AnalogSensorErrorCodeEnumType
            namespace AnchorActionEnumType {
                /*!
                 * @brief This class represents the enumeration AnchorActionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AnchorActionEnumType : uint32_t
                {
                    LOWER,
                    RAISE,
                    STOP
                };
            } // namespace AnchorActionEnumType
            namespace AnchorKindEnumType {
                /*!
                 * @brief This class represents the enumeration AnchorKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AnchorKindEnumType : uint32_t
                {
                    COMMERCIAL_STOCKLESS,
                    DANFORTH,
                    FOUR_FLUKE,
                    GENERAL,
                    LIGHTWEIGHT,
                    MARK_2_LWT,
                    MARK_2_STOCKLESS,
                    MUSHROOM,
                    NAVY_TYPE_STOCK,
                    NONMAGNETIC,
                    STANDARD_NAVY_STOCKLESS,
                    TWO_FLUKE_BALANCED_FLUKE,
                    WEDGE_BLOCK_LWT
                };
            } // namespace AnchorKindEnumType
            namespace AnchorLocationEnumType {
                /*!
                 * @brief This class represents the enumeration AnchorLocationEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AnchorLocationEnumType : uint32_t
                {
                    BOWER,
                    KEEL,
                    STERN
                };
            } // namespace AnchorLocationEnumType
            namespace AnchorStateEnumType {
                /*!
                 * @brief This class represents the enumeration AnchorStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AnchorStateEnumType : uint32_t
                {
                    DEPLOYED,
                    LOWERING,
                    STOPPED,
                    RAISING,
                    STOWED
                };
            } // namespace AnchorStateEnumType
            namespace AudioEncodingQualityEnumType {
                /*!
                 * @brief This class represents the enumeration AudioEncodingQualityEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum AudioEncodingQualityEnumType : uint32_t
                {
                    AVERAGE,
                    BEST,
                    BETTER,
                    GOOD,
                    LESS,
                    POOR,
                    WORST
                };
            } // namespace AudioEncodingQualityEnumType
            namespace BearingAngleEnumType {
                /*!
                 * @brief This class represents the enumeration BearingAngleEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BearingAngleEnumType : uint32_t
                {
                    OWNSHIP,
                    NORTH
                };
            } // namespace BearingAngleEnumType
            namespace BilgeControlEnumType {
                /*!
                 * @brief This class represents the enumeration BilgeControlEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BilgeControlEnumType : uint32_t
                {
                    AUTO,
                    OFF,
                    ON
                };
            } // namespace BilgeControlEnumType
            namespace BilgeStateEnumType {
                /*!
                 * @brief This class represents the enumeration BilgeStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BilgeStateEnumType : uint32_t
                {
                    FAULT,
                    OFF,
                    ON
                };
            } // namespace BilgeStateEnumType
            namespace BitDepthEnumType {
                /*!
                 * @brief This class represents the enumeration BitDepthEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BitDepthEnumType : uint32_t
                {
                    TEN_BITS,
                    TWELVE_BITS,
                    FOURTEEN_BITS,
                    SIXTEEN_BITS,
                    TWENTY_BITS,
                    TWENTY_FOUR_BITS,
                    THIRTY_TWO_BITS,
                    FOURTY_BITS,
                    FOURTY_EIGHT_BITS,
                    FIFTY_SIX_BITS,
                    SIXTY_FOUR_BITS,
                    EIGHT_BITS
                };
            } // namespace BitDepthEnumType
            namespace BlastConditionEnumType {
                /*!
                 * @brief This class represents the enumeration BlastConditionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BlastConditionEnumType : uint32_t
                {
                    BLASTING,
                    RESTING
                };
            } // namespace BlastConditionEnumType
            namespace BlastKindEnumType {
                /*!
                 * @brief This class represents the enumeration BlastKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum BlastKindEnumType : uint32_t
                {
                    LONG_BLAST,
                    SHORT_BLAST
                };
            } // namespace BlastKindEnumType
            namespace CollisionAvoidStateEnumType {
                /*!
                 * @brief This class represents the enumeration CollisionAvoidStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CollisionAvoidStateEnumType : uint32_t
                {
                    DEVIATE_FROM_PATH,
                    DO_NOTHING,
                    STOP_ON_PATH
                };
            } // namespace CollisionAvoidStateEnumType
            namespace CollisionAvoidStatusEnumType {
                /*!
                 * @brief This class represents the enumeration CollisionAvoidStatusEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CollisionAvoidStatusEnumType : uint32_t
                {
                    ACTIVE_AVOID_OBSTACLE,
                    ACTIVE_STOP_ON_OBSTACLE,
                    DISABLED,
                    ENABLED
                };
            } // namespace CollisionAvoidStatusEnumType
            namespace COLREGSClassificationEnumType {
                /*!
                 * @brief This class represents the enumeration COLREGSClassificationEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum COLREGSClassificationEnumType : uint32_t
                {
                    POWER_DRIVEN_UNDERWAY,
                    SAILING,
                    FISHING,
                    NOT_UNDER_COMMAND,
                    RESTRICTED_IN_ABILITY_TO_MANUEVER,
                    ANCHORED,
                    CONSTRAINED_BY_DRAUGHT,
                    PUSHING,
                    TOWING,
                    NON_VESSEL
                };
            } // namespace COLREGSClassificationEnumType
            namespace CommandStatusReasonEnumType {
                /*!
                 * @brief This class represents the enumeration CommandStatusReasonEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CommandStatusReasonEnumType : uint32_t
                {
                    CANCELED,
                    VALIDATION_FAILED,
                    OBJECTIVE_FAILED,
                    SERVICE_FAILED,
                    RESOURCE_FAILED,
                    RESOURCE_REJECTED,
                    INTERRUPTED,
                    TIMEOUT,
                    SUCCEEDED
                };
            } // namespace CommandStatusReasonEnumType
            namespace ContactManeuverInfluenceEnumType {
                /*!
                 * @brief This class represents the enumeration ContactManeuverInfluenceEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ContactManeuverInfluenceEnumType : uint32_t
                {
                    BEING_OVERTAKEN_COMPLIANT,
                    BEING_OVERTAKEN_NONCOMPLIANT,
                    CROSSING_LEFT_COMPLIANT,
                    CROSSING_LEFT_NONCOMPLIANT,
                    CROSSING_RIGHT_COMPLIANT,
                    CROSSING_RIGHT_NONCOMPLIANT,
                    HEAD_ON_COMPLIANT,
                    HEAD_ON_NONCOMPLIANT,
                    OVERTAKING_COMPLIANT,
                    OVERTAKING_NONCOMPLIANT,
                    GUIDE,
                    IN_EXTREMIS,
                    COLLISION_AVOIDANCE,
                    PREEMPTIVE,
                    OBSTACLE_AVOIDANCE,
                    NONE
                };
            } // namespace ContactManeuverInfluenceEnumType
            namespace ContingencyBehaviorEnumType {
                /*!
                 * @brief This class represents the enumeration ContingencyBehaviorEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ContingencyBehaviorEnumType : uint32_t
                {
                    CONTINUE,
                    FINISH,
                    LOITER,
                    NONE,
                    VEHICLE_SPECIFIC,
                    HOME
                };
            } // namespace ContingencyBehaviorEnumType
            namespace CoordinateSystemEnumType {
                /*!
                 * @brief This class represents the enumeration CoordinateSystemEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CoordinateSystemEnumType : uint32_t
                {
                    SENSOR_COORDINATE_SYSTEM,
                    VEHICLE_COORDINATE_SYSTEM
                };
            } // namespace CoordinateSystemEnumType
            namespace CoreStateEnumType {
                /*!
                 * @brief This class represents the enumeration CoreStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CoreStateEnumType : uint32_t
                {
                    EMERGENCY,
                    FAILURE,
                    INITIAL,
                    READY,
                    RESET,
                    RESUME,
                    SHUTDOWN,
                    STANDBY
                };
            } // namespace CoreStateEnumType
            namespace DigitalAudioFormatEnumType {
                /*!
                 * @brief This class represents the enumeration DigitalAudioFormatEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum DigitalAudioFormatEnumType : uint32_t
                {
                    AAC_MPEG2,
                    AAC_MPEG4,
                    AIFF,
                    ALAC,
                    DOLBY_DIGITAL,
                    DTS,
                    FLAC,
                    LPCM_PCM,
                    MP2,
                    MP3,
                    REAL_AUDIO,
                    SPEEX,
                    TRUE_AUDIO,
                    ULAW,
                    VORBIS,
                    WAV,
                    WMA,
                    WMA9_LOSS_LESS
                };
            } // namespace DigitalAudioFormatEnumType
            namespace DigitalSensorErrorCodeEnumType {
                /*!
                 * @brief This class represents the enumeration DigitalSensorErrorCodeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum DigitalSensorErrorCodeEnumType : uint32_t
                {
                    INVALID_FORMAT,
                    INVALID_FRAME_SIZE,
                    INVALID_MAX_BIT_RATE,
                    INVALID_MAX_FRAME_RATE,
                    INVALID_MIN_BIT_RATE,
                    INVALID_MIN_FRAME_RATE,
                    MULTIPLE_INVALID_PARAMETERS,
                    UNKNOWN_ERROR_FAULT,
                    UNKNOWN_SENSOR_ID
                };
            } // namespace DigitalSensorErrorCodeEnumType
            namespace DomainEnumType {
                /*!
                 * @brief This class represents the enumeration DomainEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum DomainEnumType : uint32_t
                {
                    AIR,
                    GROUND,
                    SURFACE,
                    UNDERSEA
                };
            } // namespace DomainEnumType
            namespace EngineKindEnumType {
                /*!
                 * @brief This class represents the enumeration EngineKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum EngineKindEnumType : uint32_t
                {
                    DIESEL,
                    GAS
                };
            } // namespace EngineKindEnumType
            namespace ErrorCodeEnumType {
                /*!
                 * @brief This class represents the enumeration ErrorCodeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ErrorCodeEnumType : uint32_t
                {
                    ACTUATOR,
                    FILESYS,
                    NONE,
                    POWER,
                    PROCESSOR,
                    RAM,
                    ROM,
                    SENSOR,
                    SOFTWARE
                };
            } // namespace ErrorCodeEnumType
            namespace ErrorConditionEnumType {
                /*!
                 * @brief This class represents the enumeration ErrorConditionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ErrorConditionEnumType : uint32_t
                {
                    INFO,
                    WARN,
                    ERROR,
                    FAIL,
                    NONE
                };
            } // namespace ErrorConditionEnumType
            namespace ExposureModeEnumType {
                /*!
                 * @brief This class represents the enumeration ExposureModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ExposureModeEnumType : uint32_t
                {
                    AUTO_DEFAULT,
                    MANUAL,
                    APETURE_PRIORITY,
                    SHUTTER_PRIORITY
                };
            } // namespace ExposureModeEnumType
            namespace FrameSizeEnumType {
                /*!
                 * @brief This class represents the enumeration FrameSizeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum FrameSizeEnumType : uint32_t
                {
                    CGA_320x200,
                    CIF_1408x1152,
                    CIF_352x288,
                    CIF_704x576,
                    EGA_640x350,
                    HD1080_1920x1080,
                    HD480_852x480,
                    HD720_1280x720,
                    HSXGA_5120x4096,
                    QCIF_176x144,
                    QQVGA_160x120,
                    QSXGA_2560x2048,
                    QVGA_320x240,
                    QXGA_2048x1536,
                    SQCIF_128x96,
                    SVGA_800x600,
                    SXGA_1280x1024,
                    UXGA_1600x1200,
                    VGA_640x480,
                    WHSXGA_6400x4096,
                    WHUXGA_7680x4800,
                    WOXGA_2560x1600,
                    WQSXGA_3200x2048,
                    WQUXGA_3840x2400,
                    WSXGA_1600x1024,
                    WUXGA_1920x1200,
                    WVGA_852x480,
                    WXGA_1366x768,
                    XGA_1024x768
                };
            } // namespace FrameSizeEnumType
            namespace GPSConstellationEnumType {
                /*!
                 * @brief This class represents the enumeration GPSConstellationEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum GPSConstellationEnumType : uint32_t
                {
                    UNKNOWN,
                    BEIDOU,
                    GALILEO,
                    GLONASS,
                    GPS,
                    IRNSS,
                    QZSS,
                    SBAS
                };
            } // namespace GPSConstellationEnumType
            namespace GPSFixEnumType {
                /*!
                 * @brief This class represents the enumeration GPSFixEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum GPSFixEnumType : uint32_t
                {
                    INITIATING,
                    PERFORMING,
                    STABLE
                };
            } // namespace GPSFixEnumType
            namespace GPSNavigationSolutionEnumType {
                /*!
                 * @brief This class represents the enumeration GPSNavigationSolutionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum GPSNavigationSolutionEnumType : uint32_t
                {
                    GPS_1,
                    GPS_2,
                    GPS_2D,
                    GPS_3,
                    GPS_3D,
                    GPS_4,
                    GPS_DEAD_RECK,
                    NO_NAV
                };
            } // namespace GPSNavigationSolutionEnumType
            namespace GuardedTeleoperationStatusEnumType {
                /*!
                 * @brief This class represents the enumeration GuardedTeleoperationStatusEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum GuardedTeleoperationStatusEnumType : uint32_t
                {
                    DISABLED,
                    ENABLED,
                    ACTIVE_AVOID_OBSTACLE,
                    PITCHOVER_LIMIT,
                    ROLLOVER_LIMIT,
                    ACTIVE_STOP_ON_OBSTACLE
                };
            } // namespace GuardedTeleoperationStatusEnumType
            namespace H264EncodingEnumType {
                /*!
                 * @brief This class represents the enumeration H264EncodingEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum H264EncodingEnumType : uint32_t
                {
                    BASELINE,
                    CAVLC444,
                    CONSTRAINED_BASELINE,
                    CONSTRAINED_HIGH,
                    EXTENDED,
                    HIGH,
                    HIGH10,
                    HIGH10_INTRA,
                    HIGH422,
                    HIGH422_INTRA,
                    HIGH444_INTRA,
                    HIGH444_PREDICTIVE,
                    MAIN,
                    MULTIVIEW_HIGH,
                    PROGRESSIVE_HIGH,
                    SCALABLE_BASELINE,
                    SCALABLE_CONSTRAINED_BASELINE,
                    SCALABLE_CONSTRAINED_HIGH,
                    SCALABLE_HIGH,
                    SCALABLE_HIGH_INTRA,
                    STEREO_HIGH
                };
            } // namespace H264EncodingEnumType
            namespace H264PresetEnumType {
                /*!
                 * @brief This class represents the enumeration H264PresetEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum H264PresetEnumType : uint32_t
                {
                    BEST_QUALITY,
                    DRIVE_VISION,
                    LOW_LATENCY,
                    MANIPULATION,
                    PERSISTENT_STARE,
                    PROGRAM_SPECIFIC_1,
                    PROGRAM_SPECIFIC_2,
                    PROGRAM_SPECIFIC_3,
                    PROGRAM_SPECIFIC_4,
                    SLOW_COMMS
                };
            } // namespace H264PresetEnumType
            namespace HandoverResultEnumType {
                /*!
                 * @brief This class represents the enumeration HandoverResultEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum HandoverResultEnumType : uint32_t
                {
                    DEFERRED,
                    DENIED,
                    GRANTED,
                    TIMEOUT,
                    INSUFFICIENT_AUTHORITY,
                    NOT_AVAILABLE
                };
            } // namespace HandoverResultEnumType
            namespace HeadingReferenceEnumType {
                /*!
                 * @brief This class represents the enumeration HeadingReferenceEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum HeadingReferenceEnumType : uint32_t
                {
                    MAGNETIC_NORTH,
                    TRUE_NORTH,
                    WIND_DIRECTION
                };
            } // namespace HeadingReferenceEnumType
            namespace HeightModeEnumType {
                /*!
                 * @brief This class represents the enumeration HeightModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum HeightModeEnumType : uint32_t
                {
                    ALTITUDE,
                    DEPTH
                };
            } // namespace HeightModeEnumType
            namespace HoverKindEnumType {
                /*!
                 * @brief This class represents the enumeration HoverKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum HoverKindEnumType : uint32_t
                {
                    LAT_LON_PRIORITY,
                    Z_PRIORITY
                };
            } // namespace HoverKindEnumType
            namespace IgnitionStateEnumType {
                /*!
                 * @brief This class represents the enumeration IgnitionStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum IgnitionStateEnumType : uint32_t
                {
                    OFF,
                    RUN,
                    START
                };
            } // namespace IgnitionStateEnumType
            namespace ImageFormatEnumType {
                /*!
                 * @brief This class represents the enumeration ImageFormatEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ImageFormatEnumType : uint32_t
                {
                    BMP,
                    CR2_RAW,
                    DNG,
                    GIF,
                    JPEG,
                    NEF,
                    PGM,
                    PNG,
                    PNM,
                    PPM,
                    TIFF
                };
            } // namespace ImageFormatEnumType
            namespace ImagingModeEnumType {
                /*!
                 * @brief This class represents the enumeration ImagingModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ImagingModeEnumType : uint32_t
                {
                    COLOR,
                    GREYSCALE,
                    INFRARED,
                    LOWLIGHT
                };
            } // namespace ImagingModeEnumType
            namespace InertialSensorOpStatusEnumType {
                /*!
                 * @brief This class represents the enumeration InertialSensorOpStatusEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum InertialSensorOpStatusEnumType : uint32_t
                {
                    COURSE_GPS_ALIGNMENT,
                    COURSE_STATIONARY_ALIGNMENT,
                    FINE_GPS_ALIGNMENT_COMPLETE,
                    FINE_GPS_ALIGNMENT_STARTED,
                    FINE_STATIONARY_ALIGNMENT_COMPLETE,
                    FINE_STATIONARY_ALIGNMENT_STARTED,
                    INERTIAL_SENSOR_FAILURE,
                    INIT,
                    OPERATIONAL
                };
            } // namespace InertialSensorOpStatusEnumType
            namespace InertialSensorStateEnumType {
                /*!
                 * @brief This class represents the enumeration InertialSensorStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum InertialSensorStateEnumType : uint32_t
                {
                    OFF,
                    ON,
                    RESTARTING
                };
            } // namespace InertialSensorStateEnumType
            namespace LightSensitivityEnumType {
                /*!
                 * @brief This class represents the enumeration LightSensitivityEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum LightSensitivityEnumType : uint32_t
                {
                    AUTO_DEFAULT,
                    ISO_100,
                    ISO_1600,
                    ISO_200,
                    ISO_3200,
                    ISO_400,
                    ISO_800
                };
            } // namespace LightSensitivityEnumType
            namespace LostCommsStatusEnumType {
                /*!
                 * @brief This class represents the enumeration LostCommsStatusEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum LostCommsStatusEnumType : uint32_t
                {
                    ACTIVE,
                    DISABLED,
                    ENABLED
                };
            } // namespace LostCommsStatusEnumType
            namespace MastActionEnumType {
                /*!
                 * @brief This class represents the enumeration MastActionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum MastActionEnumType : uint32_t
                {
                    LOWER,
                    RAISE,
                    STOP
                };
            } // namespace MastActionEnumType
            namespace MastStateEnumType {
                /*!
                 * @brief This class represents the enumeration MastStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum MastStateEnumType : uint32_t
                {
                    DOWN,
                    MOVING_DOWN,
                    MOVING_UP,
                    UP
                };
            } // namespace MastStateEnumType
            namespace CommandStatusEnumType {
                /*!
                 * @brief This class represents the enumeration CommandStatusEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum CommandStatusEnumType : uint32_t
                {
                    FAILED,
                    COMPLETED,
                    ISSUED,
                    COMMANDED,
                    EXECUTING,
                    CANCELED
                };
            } // namespace CommandStatusEnumType
            namespace DataEncodingEnumType {
                /*!
                 * @brief This class represents the enumeration DataEncodingEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum DataEncodingEnumType : uint32_t
                {
                    AVI,
                    H_261,
                    H_262,
                    H_263,
                    H_263PLUS,
                    H_264,
                    MJPEG,
                    MPEG_1,
                    MPEG_2,
                    MPEG_4,
                    NONE
                };
            } // namespace DataEncodingEnumType
            namespace FeatureKindEnumType {
                /*!
                 * @brief This class represents the enumeration FeatureKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum FeatureKindEnumType : uint32_t
                {
                    CONTACT,
                    OTHER
                };
            } // namespace FeatureKindEnumType
            namespace LoiterKindEnumType {
                /*!
                 * @brief This class represents the enumeration LoiterKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum LoiterKindEnumType : uint32_t
                {
                    CIRCLE,
                    RACETRACK
                };
            } // namespace LoiterKindEnumType
            namespace TaskStateEnumType {
                /*!
                 * @brief This class represents the enumeration TaskStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum TaskStateEnumType : uint32_t
                {
                    PLANNED_PENDING_APPROVAL,
                    AWAITING_EXECUTION_APPROVAL,
                    ALLOCATED,
                    EXECUTION_APPROVED,
                    CANCELED,
                    COMPLETED,
                    DROPPED,
                    PLANNED,
                    PROPOSED,
                    QUEUED,
                    EXECUTING,
                    FAILED,
                    UNALLOCATED,
                    ALLOCATED_PENDING_APPROVAL,
                    AWAITING_MISSION_PLAN,
                    PAUSED,
                    QUEUING,
                    PLANNING
                };
            } // namespace TaskStateEnumType
            namespace TransportEncodingEnumType {
                /*!
                 * @brief This class represents the enumeration TransportEncodingEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum TransportEncodingEnumType : uint32_t
                {
                    MPEG_2,
                    MP4,
                    OTHER
                };
            } // namespace TransportEncodingEnumType
            namespace WaypointKindEnumType {
                /*!
                 * @brief This class represents the enumeration WaypointKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum WaypointKindEnumType : uint32_t
                {
                    APPROACH_FINAL_POINT,
                    APPROACH_INITIAL_POINT,
                    LAUNCH,
                    LOITER,
                    NAV_ONLY,
                    NAV_TARGET,
                    OTHER,
                    RECOVERY,
                    RENDEZVOUS
                };
            } // namespace WaypointKindEnumType
            namespace MeteringModeEnumType {
                /*!
                 * @brief This class represents the enumeration MeteringModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum MeteringModeEnumType : uint32_t
                {
                    AUTO_DEFAULT,
                    CENTER_WEIGHTED,
                    SPOT
                };
            } // namespace MeteringModeEnumType
            namespace MountModeEnumType {
                /*!
                 * @brief This class represents the enumeration MountModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum MountModeEnumType : uint32_t
                {
                    FIXED,
                    FIXED_BOW_THRUSTER,
                    FIXED_PORT_PROPULSOR,
                    FIXED_STERN_THRUSTER,
                    VARIABLE_BEARING,
                    VARIABLE_PITCH,
                    VARIABLE_PITCH_AND_BEARING
                };
            } // namespace MountModeEnumType
            namespace NavigationSolutionEnumType {
                /*!
                 * @brief This class represents the enumeration NavigationSolutionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum NavigationSolutionEnumType : uint32_t
                {
                    ESTIMATED,
                    GROUND_TRUTH,
                    MEASURED
                };
            } // namespace NavigationSolutionEnumType
            namespace ObstacleAvoidanceEnumType {
                /*!
                 * @brief This class represents the enumeration ObstacleAvoidanceEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ObstacleAvoidanceEnumType : uint32_t
                {
                    DEVIATE_FROM_PATH,
                    DO_NOTHING,
                    STOP_ON_PATH
                };
            } // namespace ObstacleAvoidanceEnumType
            namespace PathWayEnumType {
                /*!
                 * @brief This class represents the enumeration PathWayEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum PathWayEnumType : uint32_t
                {
                    HISTORIAL_GLOBAL,
                    HISTORICAL_LOCAL,
                    PLANNED_GLOBAL,
                    PLANNED_LOCAL
                };
            } // namespace PathWayEnumType
            namespace PlatformModeEnumType {
                /*!
                 * @brief This class represents the enumeration PlatformModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum PlatformModeEnumType : uint32_t
                {
                    MAINTENANCE,
                    STANDARD_OPERATING,
                    TRAINING
                };
            } // namespace PlatformModeEnumType
            namespace PlatformModeTransitionEnumType {
                /*!
                 * @brief This class represents the enumeration PlatformModeTransitionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum PlatformModeTransitionEnumType : uint32_t
                {
                    ACTIVE,
                    EXITING,
                    INITIALIZING
                };
            } // namespace PlatformModeTransitionEnumType
            namespace PowerPlantStateEnumType {
                /*!
                 * @brief This class represents the enumeration PowerPlantStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum PowerPlantStateEnumType : uint32_t
                {
                    FAULT,
                    OFF,
                    ON
                };
            } // namespace PowerPlantStateEnumType
            namespace PumpStateEnumType {
                /*!
                 * @brief This class represents the enumeration PumpStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum PumpStateEnumType : uint32_t
                {
                    FAULT,
                    OFF,
                    ON_FORWARD,
                    ON_REVERSE
                };
            } // namespace PumpStateEnumType
            namespace RangeErrorCodeEnumType {
                /*!
                 * @brief This class represents the enumeration RangeErrorCodeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum RangeErrorCodeEnumType : uint32_t
                {
                    INVALID_HORIZONTAL_FOV,
                    INVALID_SENSOR_RANGE,
                    INVALID_SENSOR_STATE,
                    INVALID_UPDATE_RATE,
                    INVALID_VERTICAL_FOV,
                    MULTIPLE_INVALID_PARAMETERS,
                    UNKNOWN_ERROR_FAULT,
                    UNKNOWN_SENSOR_ID
                };
            } // namespace RangeErrorCodeEnumType
            namespace RenderUselessStateEnumType {
                /*!
                 * @brief This class represents the enumeration RenderUselessStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum RenderUselessStateEnumType : uint32_t
                {
                    NORMAL,
                    RENDERED_USELESS,
                    RENDERED_USELESS_FAILED
                };
            } // namespace RenderUselessStateEnumType
            namespace SourceIndicatorEnumType {
                /*!
                 * @brief This class represents the enumeration SourceIndicatorEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum SourceIndicatorEnumType : uint32_t
                {
                    ACTUAL,
                    GROUND_TRUTH,
                    SIMULATED,
                    TENTATIVE
                };
            } // namespace SourceIndicatorEnumType
            namespace StillImageErrorCodeEnumType {
                /*!
                 * @brief This class represents the enumeration StillImageErrorCodeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum StillImageErrorCodeEnumType : uint32_t
                {
                    INVALID_FORMAT,
                    INVALID_FRAME_SIZE,
                    MULTIPLE_INVALID_PARAMETERS,
                    UNKNOWN_ERROR_FAULT,
                    UNKNOWN_SENSOR_ID
                };
            } // namespace StillImageErrorCodeEnumType
            namespace StreamStateEnumType {
                /*!
                 * @brief This class represents the enumeration StreamStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum StreamStateEnumType : uint32_t
                {
                    PAUSE,
                    PLAY,
                    STOP
                };
            } // namespace StreamStateEnumType
            namespace TamperDetectionStateEnumType {
                /*!
                 * @brief This class represents the enumeration TamperDetectionStateEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum TamperDetectionStateEnumType : uint32_t
                {
                    ALWAYS_ENABLED_OR_CLEAR,
                    DISABLED,
                    ENABLED
                };
            } // namespace TamperDetectionStateEnumType
            namespace VehicleSpeedModeEnumType {
                /*!
                 * @brief This class represents the enumeration VehicleSpeedModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum VehicleSpeedModeEnumType : uint32_t
                {
                    LRC,
                    MEC,
                    MRC,
                    SLOW,
                    VEHICLE_SPECIFIC
                };
            } // namespace VehicleSpeedModeEnumType
            namespace VehicleSpeedReferenceEnumType {
                /*!
                 * @brief This class represents the enumeration VehicleSpeedReferenceEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum VehicleSpeedReferenceEnumType : uint32_t
                {
                    SPEED_THROUGH_AIR,
                    OTHER,
                    RPM,
                    SPEED_OVER_GROUND,
                    SPEED_THROUGH_WATER
                };
            } // namespace VehicleSpeedReferenceEnumType
            namespace VelocityCommandTypeEnumType {
                /*!
                 * @brief This class represents the enumeration VelocityCommandTypeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum VelocityCommandTypeEnumType : uint32_t
                {
                    CURRENT_COMMAND_SOG,
                    CURRENT_COMMAND_SRM,
                    DEFAULT_COMMAND_SOG,
                    DEFAULT_COMMAND_SRM,
                    MAX_ALLOWED_SOG,
                    MAX_ALLOWED_SRM,
                    MIN_ALLOWED_SOG,
                    MIN_ALLOWED_SRM
                };
            } // namespace VelocityCommandTypeEnumType
            namespace VideoFormatEnumType {
                /*!
                 * @brief This class represents the enumeration VideoFormatEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum VideoFormatEnumType : uint32_t
                {
                    NTSCJ,
                    NTSCM,
                    PALM,
                    PALN,
                    SECAMBG,
                    SECAML
                };
            } // namespace VideoFormatEnumType
            namespace VisualClassificationEnumType {
                /*!
                 * @brief This class represents the enumeration VisualClassificationEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum VisualClassificationEnumType : uint32_t
                {
                    AID_TO_NAVIGATION_CHANNEL_MARKER,
                    MEDIUM_VESSEL_FISHING,
                    AID_TO_NAVIGATION_GENERAL,
                    SMALL_VESSEL_JET_SKI,
                    AID_TO_NAVIGATION_LARGE_BUOY,
                    LARGE_VESSEL_CARGO,
                    LARGE_GENERAL_OBSTACLE,
                    LARGE_VESSEL_GENERAL,
                    LARGE_VESSEL_MILITARY,
                    LARGE_VESSEL_PASSENGER,
                    LARGE_VESSEL_OTHER,
                    AID_TO_NAVIGATION_LIGHTHOUSE,
                    MEDIUM_VESSEL_GENERAL,
                    MEDIUM_VESSEL_MILITARY,
                    MEDIUM_VESSEL_OTHER,
                    SMALL_VESSEL_POWER_BOAT,
                    SAILBOAT,
                    AID_TO_NAVIGATION_SMALL_BUOY,
                    SMALL_GENERAL_OBSTACLE,
                    SMALL_VESSEL_GENERAL,
                    SMALL_VESSEL_MILITARY,
                    SMALL_VESSEL_OTHER,
                    MEDIUM_VESSEL_TUG,
                    MEDIUM_VESSEL_TUG_IN_TOW,
                    MEDIUM_VESSEL_YACHT,
                    MINE_LIKE_OBJECT
                };
            } // namespace VisualClassificationEnumType
            namespace WaterTurnDirectionEnumType {
                /*!
                 * @brief This class represents the enumeration WaterTurnDirectionEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum WaterTurnDirectionEnumType : uint32_t
                {
                    NO_VALID_TURN_DIRECTION,
                    LEFT_TURN,
                    RIGHT_TURN,
                    VEHICLE_SPECIFIC,
                    INTO_THE_CURRENT,
                    INTO_THE_WIND
                };
            } // namespace WaterTurnDirectionEnumType
            namespace WhiteBalanceEnumType {
                /*!
                 * @brief This class represents the enumeration WhiteBalanceEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum WhiteBalanceEnumType : uint32_t
                {
                    AUTO_DEFAULT,
                    CLOUDY,
                    DAYLIGHT,
                    FLASH,
                    FLUORESCENT,
                    SHADE,
                    TUNGSTEN
                };
            } // namespace WhiteBalanceEnumType
            namespace ZoneKindEnumType {
                /*!
                 * @brief This class represents the enumeration ZoneKindEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ZoneKindEnumType : uint32_t
                {
                    KEEP_IN,
                    KEEP_OUT
                };
            } // namespace ZoneKindEnumType
            namespace ZoomModeEnumType {
                /*!
                 * @brief This class represents the enumeration ZoomModeEnumType defined by the user in the IDL file.
                 * @ingroup ENUMERATIONSETS
                 */
                enum ZoomModeEnumType : uint32_t
                {
                    ANALOG_ONLY,
                    DIGITAL_ONLY,
                    OFF,
                    MIXED_DEFAULT
                };
            } // namespace ZoomModeEnumType
        } // namespace MaritimeEnumeration
    } // namespace Common
} // namespace UMAA

#endif // _FAST_DDS_GENERATED_ENUMERATIONSETS_H_